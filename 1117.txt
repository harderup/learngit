今天做了一个两数之和的算法，有两种方法
第一种：效果相对比较低,是用双层循环实现
public int [] towSum(int [] nums,int target){
	int [] result = new int[2];
		for(int i = 0;i<nums.length-1;i++){
				for(int j = i+1;j<nums.length-1;j++){
							if(nums[i]+nums[j]==target){
											result[0] = i;
															result[1] = j;
																			result result;
																						}
																								}
																									}
																										return result;
																										}

																										第二种：借助Map集合来实现,给map集合中存储key为target与数组值的差值,value值为数组下标
																										public int [] twoSum(int [] nums.int target){
																											int [] resullt = new int[2];
																												Map<Integer,Integer> map = new HashMap<>();
																													for(int i = 0;i<nums.length;i++){
																															if(map.containsKey(nums[i]){
																																		result[1] = i;
																																					result[0] = map.get(nums[i]);
																																								return result;
																																										}
																																											}
																																												map.put(target-nums[i],i);
																																												}


